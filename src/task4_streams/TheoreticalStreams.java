package task4_streams;

import java.util.Arrays;
import java.util.List;

/**
 * 1.Как создать бесконечный стрим и в каких случаях это может быть полезно?
 *
 * 2. Каким образом можно преобразовать стрим в коллекцию или массив, и какие методы для этого используются?
 *
 * 3.Что такое "коллектор" (Collector) в контексте стримов, и какие стандартные коллекторы предоставляются в Java?
 */
public class TheoreticalStreams {

    public static void main(String[] args) {

        /**
         * Что выведет код?
         */

        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

        int result = numbers.stream()
                .filter(n -> n % 2 == 0)
                .map(n -> n * 2)
                .reduce(0, (a, b) -> a + b);

        System.out.println(result);


        /**
         * Что выведет код?
         */

        List<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David");

        String result1 = names.stream()
                .filter(name -> name.length() > 4)
                .findFirst()
                .orElse("No name");

        System.out.println(result1);

























    }
    /**
     * Ответы :
     *
     * 1.Для создания бесконечного стрима в Java вы можете использовать методы Stream.iterate()
     * или Stream.generate(). Пример создания бесконечного стрима с использованием Stream.iterate():
     * Бесконечные стримы могут быть полезными в ситуациях, где вы хотите генерировать бесконечные
     * последовательности данных, такие как бесконечные ряды чисел, поток случайных чисел и т. д.
     *
     * 2.Для преобразования стрима в коллекцию, вы можете использовать метод collect(),
     * который принимает коллектор (Collector) в качестве аргумента.
     *
     * 3.Коллектор (Collector) в контексте стримов - это объект, который определяет, как элементы
     * стрима собираются и агрегируются в конечную коллекцию или другую структуру данных. Java предоставля
     * ет набор стандартных коллекторов в классе Collectors, таких как toList(), toSet(), toMap(),
     * joining() и другие. Пример использования коллектора Collectors.toList()
     *
     * Задачи:
     *
     * 1.Код выведет "12". Сначала он фильтрует числа, оставляя только четные (2 и 4), затем удваивает
     * их (4 и 8), и, наконец, суммирует их (4 + 8 = 12).
     *
     * 2.Код выведет "Charlie", так как он фильтрует имена по длине больше 4 символов и находит первое подходящее имя.
     */
}
