package task3_functional;

import java.util.Arrays;
import java.util.List;

/**
 * 1.Как можно передать функциональный интерфейс в качестве аргумента методу или вернуть его из метода в Java?
 *
 * 2.Что такое "ссылка на метод" (method reference) в контексте функциональных интерфейсов,
 * и какие типы ссылок на методы существуют?
 *
 *
 */
public class TheoreticalFunctional {

    public static void main(String[] args) {

    /**
     * Что выведет код?
     */

        List<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David");

        String result = names.stream()
                .filter(name -> name.length() > 4)
                .findFirst()
                .orElse("No name");

        System.out.println(result);




        /**
         * Что выведет код?
         */

        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);

        int sum = numbers.stream()
                .filter(n -> n % 2 == 0)
                .map(n -> n * 2)
                .reduce(0, Integer::sum);

        System.out.println(sum);










    }

    /**
     * Ответы :
     *
     * 1.В Java можно передавать функциональный интерфейс в качестве аргумента методу и возвращать его из метода так,
     * как вы передаете и возвращаете обычные объекты. Это одна из мощных возможностей функциональных интерфейсов.
     * Для этого используются концепции функционального программирования, такие как передача функций как аргументов
     * и возврат функций из других функций.
     *
     * 2.Ссылка на метод (method reference) в контексте функциональных интерфейсов представляет собой сокращенный
     * и удобный способ передать метод как значение функционального интерфейса. Ссылки на методы позволяют использовать
     * существующие методы в качестве функций, что делает код более кратким и читаемым.
     *
     * В Java существуют четыре основных типа ссылок на методы:
     * Ссылка на статический метод (Static Method Reference):
     * Этот тип ссылки используется для вызова статического метода.
     * Синтаксис: ClassName::staticMethodName
     *
     * Пример:
     * : 25
     * Ссылка на метод экземпляра (Instance Method Reference):
     * Этот тип ссылки используется для вызова метода экземпляра класса, к которому применяется метод.
     * Синтаксис: instance::instanceMethodName
     * Ссылка на метод экземпляра объекта (Instance Method of a Particular Object Reference):
     * Этот тип ссылки используется для вызова метода экземпляра конкретного объекта.
     * Синтаксис: object::instanceMethodName
     *
     * Ссылка на конструктор
     * (Constructor Reference):
     * Этот тип ссылки используется для создания нового объекта с использованием конструктора.
     * Синтаксис: ClassName::new
     * Ссылки на методы позволяют избежать написания анонимных классов или лямбда-выражений, когда методы просто передаются в качестве аргументов или сохраняются в переменных. Это улучшает читаемость кода и сокращает его объем.
     *
     *
     *
     * Задачи :
     *
     * 1.Код выведет "Charlie", так как он фильтрует имена по длине больше 4 символов и находит первое подходящее имя.
     *
     * 2.Код выведет "12". Сначала он фильтрует числа, оставляя только четные, затем
     * удваивает каждое число, и, наконец, суммирует все четные числа (2 + 4 + 6 = 12).
     */
}
